# Linhas a serem ADICIONADAS ao seu .gitignore existente

# Arquivos comuns de credenciais e chaves
credentials.json
keys.json
secrets.json
service-account-key.json # Comum para Google Cloud
*.pem
*.key # Chaves privadas SSL/SSH
*.p12
*.pfx
*.pkcs12
*.asc # Chaves PGP

# Arquivos de configuração específicos que podem conter segredos
config.local.json
config.dev.json
settings.local.js
# Adicione outros nomes de arquivos de configuração locais que você usa

# Específico para o Backend Java (Spring Boot)
# É comum ter um application.properties/yml no repositório com configurações padrão
# e um específico para o ambiente local (com segredos) que NÃO deve ser commitado.
application-local.properties
application-local.yml
application-dev.properties # Se contiver segredos específicos do dev não para o repo
application-secret.properties
application-secret.yml

# IMPORTANTE sobre application.properties:
# Se o seu arquivo principal `application.properties` ou `application.yml`
# contém segredos, ele NÃO deveria estar no Git.
# A melhor prática é ter um `application.properties.template` ou `application.yml.template`
# no Git com placeholders para os segredos, e o arquivo real (`application.properties`)
# seria ignorado e criado localmente por cada desenvolvedor.
# Se você precisa ignorar o arquivo principal por conter segredos (use com cautela):
# application.properties
# application.yml

# Google Cloud Platform
gcp-credentials.json
*.gcp.json

# AWS
.aws/ # Embora geralmente no home do usuário, pode ser adicionado ao projeto por engano
aws_access_keys.csv

# Terraform (se usado, pode conter estado com segredos)
*.tfstate
*.tfstate.backup
.terraform/terraform.tfstate

# Arquivos de IDE que às vezes podem vazar informações se não forem os padrões
# Seu .gitignore atual já cobre muitos (ex: .idea), o que é bom.

# Diretório genérico para segredos, se você padronizar um
/secrets/
secrets/
**/secrets/exemplo_secreto.txt
